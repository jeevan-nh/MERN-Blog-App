{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jhemmann\\\\Documents\\\\Rest_api\\\\MERN-3\\\\blogApplication\\\\client\\\\src\\\\containers\\\\posts\\\\UpdatePostPage.js\";\nimport React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport PostForm from \"../../components/posts/PostForm\";\nimport Validate from \"../../components/form/Validate\";\nimport { connect } from \"react-redux\";\nimport { getPostByID, updatePost } from \"../../actions/postActions\";\n\nconst UpdatePostPage = ({\n  errors,\n  updatePost,\n  loading,\n  currentPost,\n  getPostByID,\n  match,\n  history\n}) => {\n  const [post, setPost] = useState({\n    title: \"\",\n    body: \"\",\n    errors: {}\n  });\n  useEffect(() => {\n    getPostByID(match.params.id);\n  }, [match, getPostByID]); // updating the local state of post with the received post data\n\n  useEffect(() => {\n    setPost(post => ({\n      title: currentPost.title,\n      body: currentPost.body,\n      errors: { ...post.errors\n      }\n    }));\n  }, [currentPost]);\n  useEffect(() => {\n    setPost(post => {\n      return { ...post,\n        errors\n      };\n    });\n  }, [errors]);\n\n  const handleChange = e => {\n    setPost({ ...post,\n      [e.target.name]: e.target.value\n    });\n  };\n\n  const handleBlur = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    const error = { ...post.errors,\n      ...Validate(name, value).errors\n    };\n    setPost({ ...post,\n      errors: { ...error\n      }\n    });\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const {\n      title,\n      body\n    } = post;\n    updatePost(currentPost._id, {\n      title,\n      body\n    }, history);\n  }; // to ensure that the post is loaded otherwise we would make uncontrolled form access error\n\n\n  const isPostLoaded = () => {\n    return post.title || post.body || Object.keys(post.errors).length > 0;\n  };\n\n  return isPostLoaded() ? /*#__PURE__*/React.createElement(PostForm, {\n    loading: loading,\n    post: post,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }) : /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }\n  });\n};\n\nconst mapStateToProps = state => ({\n  currentPost: state.post.post,\n  loading: state.post.postLoading,\n  errors: state.errors\n});\n\nUpdatePostPage.propTypes = {\n  currentPost: PropTypes.object.isRequired,\n  loading: PropTypes.bool.isRequired,\n  errors: PropTypes.object.isRequired,\n  getPostByID: PropTypes.func.isRequired,\n  updatePost: PropTypes.func.isRequired\n};\nexport default connect(mapStateToProps, {\n  getPostByID,\n  updatePost\n})(UpdatePostPage);","map":{"version":3,"sources":["C:/Users/jhemmann/Documents/Rest_api/MERN-3/blogApplication/client/src/containers/posts/UpdatePostPage.js"],"names":["React","useState","useEffect","PropTypes","PostForm","Validate","connect","getPostByID","updatePost","UpdatePostPage","errors","loading","currentPost","match","history","post","setPost","title","body","params","id","handleChange","e","target","name","value","handleBlur","error","handleSubmit","preventDefault","_id","isPostLoaded","Object","keys","length","mapStateToProps","state","postLoading","propTypes","object","isRequired","bool","func"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,QAAP,MAAqB,iCAArB;AACA,OAAOC,QAAP,MAAqB,gCAArB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,WAAT,EAAsBC,UAAtB,QAAwC,2BAAxC;;AAEA,MAAMC,cAAc,GAAG,CAAC;AACrBC,EAAAA,MADqB;AAErBF,EAAAA,UAFqB;AAGrBG,EAAAA,OAHqB;AAIrBC,EAAAA,WAJqB;AAKrBL,EAAAA,WALqB;AAMrBM,EAAAA,KANqB;AAOrBC,EAAAA;AAPqB,CAAD,KAQjB;AACH,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBf,QAAQ,CAAC;AAC9BgB,IAAAA,KAAK,EAAE,EADuB;AAE9BC,IAAAA,IAAI,EAAE,EAFwB;AAG9BR,IAAAA,MAAM,EAAE;AAHsB,GAAD,CAAhC;AAMAR,EAAAA,SAAS,CAAC,MAAM;AACbK,IAAAA,WAAW,CAACM,KAAK,CAACM,MAAN,CAAaC,EAAd,CAAX;AACF,GAFQ,EAEN,CAACP,KAAD,EAAQN,WAAR,CAFM,CAAT,CAPG,CAWH;;AACAL,EAAAA,SAAS,CAAC,MAAM;AACbc,IAAAA,OAAO,CAACD,IAAI,KAAK;AACdE,MAAAA,KAAK,EAAEL,WAAW,CAACK,KADL;AAEdC,MAAAA,IAAI,EAAEN,WAAW,CAACM,IAFJ;AAGdR,MAAAA,MAAM,EAAE,EAAE,GAAGK,IAAI,CAACL;AAAV;AAHM,KAAL,CAAL,CAAP;AAKF,GANQ,EAMN,CAACE,WAAD,CANM,CAAT;AAQAV,EAAAA,SAAS,CAAC,MAAM;AACbc,IAAAA,OAAO,CAACD,IAAI,IAAI;AACb,aAAO,EAAE,GAAGA,IAAL;AAAWL,QAAAA;AAAX,OAAP;AACF,KAFM,CAAP;AAGF,GAJQ,EAIN,CAACA,MAAD,CAJM,CAAT;;AAMA,QAAMW,YAAY,GAAGC,CAAC,IAAI;AACvBN,IAAAA,OAAO,CAAC,EACL,GAAGD,IADE;AAEL,OAACO,CAAC,CAACC,MAAF,CAASC,IAAV,GAAiBF,CAAC,CAACC,MAAF,CAASE;AAFrB,KAAD,CAAP;AAIF,GALD;;AAOA,QAAMC,UAAU,GAAGJ,CAAC,IAAI;AACrB,UAAM;AAAEE,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAkBH,CAAC,CAACC,MAA1B;AACA,UAAMI,KAAK,GAAG,EAAE,GAAGZ,IAAI,CAACL,MAAV;AAAkB,SAAGL,QAAQ,CAACmB,IAAD,EAAOC,KAAP,CAAR,CAAsBf;AAA3C,KAAd;AACAM,IAAAA,OAAO,CAAC,EAAE,GAAGD,IAAL;AAAWL,MAAAA,MAAM,EAAE,EAAE,GAAGiB;AAAL;AAAnB,KAAD,CAAP;AACF,GAJD;;AAMA,QAAMC,YAAY,GAAGN,CAAC,IAAI;AACvBA,IAAAA,CAAC,CAACO,cAAF;AACA,UAAM;AAAEZ,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAkBH,IAAxB;AACAP,IAAAA,UAAU,CAACI,WAAW,CAACkB,GAAb,EAAkB;AAAEb,MAAAA,KAAF;AAASC,MAAAA;AAAT,KAAlB,EAAmCJ,OAAnC,CAAV;AACF,GAJD,CAvCG,CA6CH;;;AACA,QAAMiB,YAAY,GAAG,MAAM;AACxB,WAAOhB,IAAI,CAACE,KAAL,IAAcF,IAAI,CAACG,IAAnB,IAA2Bc,MAAM,CAACC,IAAP,CAAYlB,IAAI,CAACL,MAAjB,EAAyBwB,MAAzB,GAAkC,CAApE;AACF,GAFD;;AAIA,SAAOH,YAAY,kBAChB,oBAAC,QAAD;AACG,IAAA,OAAO,EAAEpB,OADZ;AAEG,IAAA,IAAI,EAAEI,IAFT;AAGG,IAAA,QAAQ,EAAEM,YAHb;AAIG,IAAA,MAAM,EAAEK,UAJX;AAKG,IAAA,QAAQ,EAAEE,YALb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADgB,gBAShB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATH;AAWF,CArED;;AAuEA,MAAMO,eAAe,GAAGC,KAAK,KAAK;AAC/BxB,EAAAA,WAAW,EAAEwB,KAAK,CAACrB,IAAN,CAAWA,IADO;AAE/BJ,EAAAA,OAAO,EAAEyB,KAAK,CAACrB,IAAN,CAAWsB,WAFW;AAG/B3B,EAAAA,MAAM,EAAE0B,KAAK,CAAC1B;AAHiB,CAAL,CAA7B;;AAMAD,cAAc,CAAC6B,SAAf,GAA2B;AACxB1B,EAAAA,WAAW,EAAET,SAAS,CAACoC,MAAV,CAAiBC,UADN;AAExB7B,EAAAA,OAAO,EAAER,SAAS,CAACsC,IAAV,CAAeD,UAFA;AAGxB9B,EAAAA,MAAM,EAAEP,SAAS,CAACoC,MAAV,CAAiBC,UAHD;AAIxBjC,EAAAA,WAAW,EAAEJ,SAAS,CAACuC,IAAV,CAAeF,UAJJ;AAKxBhC,EAAAA,UAAU,EAAEL,SAAS,CAACuC,IAAV,CAAeF;AALH,CAA3B;AAQA,eAAelC,OAAO,CACnB6B,eADmB,EAEnB;AAAE5B,EAAAA,WAAF;AAAeC,EAAAA;AAAf,CAFmB,CAAP,CAGbC,cAHa,CAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport PostForm from \"../../components/posts/PostForm\";\r\nimport Validate from \"../../components/form/Validate\";\r\nimport { connect } from \"react-redux\";\r\nimport { getPostByID, updatePost } from \"../../actions/postActions\";\r\n\r\nconst UpdatePostPage = ({\r\n   errors,\r\n   updatePost,\r\n   loading,\r\n   currentPost,\r\n   getPostByID,\r\n   match,\r\n   history\r\n}) => {\r\n   const [post, setPost] = useState({\r\n      title: \"\",\r\n      body: \"\",\r\n      errors: {}\r\n   });\r\n\r\n   useEffect(() => {\r\n      getPostByID(match.params.id);\r\n   }, [match, getPostByID]);\r\n\r\n   // updating the local state of post with the received post data\r\n   useEffect(() => {\r\n      setPost(post => ({\r\n         title: currentPost.title,\r\n         body: currentPost.body,\r\n         errors: { ...post.errors }\r\n      }));\r\n   }, [currentPost]);\r\n\r\n   useEffect(() => {\r\n      setPost(post => {\r\n         return { ...post, errors };\r\n      });\r\n   }, [errors]);\r\n\r\n   const handleChange = e => {\r\n      setPost({\r\n         ...post,\r\n         [e.target.name]: e.target.value\r\n      });\r\n   };\r\n\r\n   const handleBlur = e => {\r\n      const { name, value } = e.target;\r\n      const error = { ...post.errors, ...Validate(name, value).errors };\r\n      setPost({ ...post, errors: { ...error } });\r\n   };\r\n\r\n   const handleSubmit = e => {\r\n      e.preventDefault();\r\n      const { title, body } = post;\r\n      updatePost(currentPost._id, { title, body }, history);\r\n   };\r\n\r\n   // to ensure that the post is loaded otherwise we would make uncontrolled form access error\r\n   const isPostLoaded = () => {\r\n      return post.title || post.body || Object.keys(post.errors).length > 0;\r\n   };\r\n\r\n   return isPostLoaded() ? (\r\n      <PostForm\r\n         loading={loading}\r\n         post={post}\r\n         onChange={handleChange}\r\n         onBlur={handleBlur}\r\n         onSubmit={handleSubmit}\r\n      />\r\n   ) : (\r\n      <div />\r\n   );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n   currentPost: state.post.post,\r\n   loading: state.post.postLoading,\r\n   errors: state.errors\r\n});\r\n\r\nUpdatePostPage.propTypes = {\r\n   currentPost: PropTypes.object.isRequired,\r\n   loading: PropTypes.bool.isRequired,\r\n   errors: PropTypes.object.isRequired,\r\n   getPostByID: PropTypes.func.isRequired,\r\n   updatePost: PropTypes.func.isRequired\r\n};\r\n\r\nexport default connect(\r\n   mapStateToProps,\r\n   { getPostByID, updatePost }\r\n)(UpdatePostPage);"]},"metadata":{},"sourceType":"module"}